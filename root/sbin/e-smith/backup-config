#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupConfig;
use NethServer::TrackerClient;
use Getopt::Std;
use POSIX qw/strftime/;

my %opts;
my $backup = new NethServer::BackupConfig();

getopts('hf', \%opts);

if($opts{'h'}) {
    print "Usage: backup-config [-f]\n";
    exit(0);
}

if($opts{'f'}) {
    unlink $backup->get_destination();
}

my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
my $record = $conf->get('backup-config');
my $status = $record->prop('status') || 'disabled';
my $msg = '';

exit 0 unless ($status eq 'enabled');

my $tracker = NethServer::TrackerClient->new();

my %tasks = ();
$tasks{'pre'} = $tracker->declare_task('Preparing backup');
$tasks{'execute'} = $tracker->declare_task('Executing backup');
$tasks{'post'} = $tracker->declare_task('Cleaning up system');

out("===== Report for configuration backup =====");

my $start = time;
out("Backup started at %s", strftime('%F %T',localtime));

$ENV{'PTRACK_TASKID'} = $tasks{'pre'};
$tracker->set_task_progress($tasks{'pre'}, 0.1, 'Pre-backup');
if ($status = system(qw(/sbin/e-smith/signal-event pre-backup-config)))
{
    $msg = "Event pre-backup-config: FAIL"; 
    $tracker->set_task_done($tasks{'pre'}, $msg, 1);
    error($msg);
}
$tracker->set_task_done($tasks{'pre'}, '', 0);
out("Event pre-backup-config: SUCCESS");

$tracker->set_task_progress($tasks{'execute'}, 0.1, 'Execute');
if ($status = system("/etc/e-smith/events/actions/backup-config-execute"))
{
    $msg = "Action backup-config-execute: FAIL";
    $tracker->set_task_done($tasks{'execute'}, $msg, 1);
    error($msg);
}
$tracker->set_task_done($tasks{'execute'}, '', 0);
out("Action backup-config-execute: SUCCESS");

$ENV{'PTRACK_TASKID'} = $tasks{'post'};
$tracker->set_task_progress($tasks{'post'}, 0.1, 'Post-backup');
if ($status = system(qw(/sbin/e-smith/signal-event post-backup-config)))
{
    $msg = "Event post-backup-config: FAIL";
    $tracker->set_task_done($tasks{'post'}, $msg, 1);
    error($msg);
}
out("Event post-backup-config: SUCCESS");
$tracker->set_task_done($tasks{'post'}, '', 0);

out("Backup status: SUCCESS");
out("Backup ended at %s", strftime('%F %T',localtime));
my $duration = time - $start;
out("Time elapsed: %s hours, %s minutes, %s seconds", ($duration/(60*60))%24, ($duration/60)%60, $duration%60);


exit 0;

sub out {
    my $msg = shift;
    print sprintf("$msg\n",@_);
}

sub error {
    out(@_);
    out("Backup status: FAIL");
    exit 1;
}

